Domina Sokol

n = 28

Koristimo:

Teorem 1:
Neka je C [n,k,d] linearni kod. Tada postoje sljedeći linearni kodovi:
  1. [n-1,k,d-1] kod, d>1
  2. [n+1,k,d] kod
  3. [n,k,d-1] kod, d>1
  4. [n,k-1,d] kod, k>1
  5. [n-1,k-1,d] kod, k>1.

LoadPackage("guava");

gap> pr:=Filtered([1..28],k->BoundsMinimumDistance(28,k,GF(2)).lowerBound<>BoundsMinimumDistance(28,k,GF(2)).upperBound);
[  ]

Možmo odmah ispisati d-optimalne kodove:

 DO:=List([1..28],k->[28,k,BoundsMinimumDistance(28,k,GF(2)).lowerBound]);
[ [ 28, 1, 28 ], [ 28, 2, 18 ], [ 28, 3, 16 ], [ 28, 4, 14 ], [ 28, 5, 14 ], [ 28, 6, 12 ], [ 28, 7, 12 ], [ 28, 8, 11 ],
  [ 28, 9, 10 ], [ 28, 10, 10 ], [ 28, 11, 8 ], [ 28, 12, 8 ], [ 28, 13, 8 ], [ 28, 14, 8 ], [ 28, 15, 6 ], [ 28, 16, 6 ],
  [ 28, 17, 6 ], [ 28, 18, 5 ], [ 28, 19, 4 ], [ 28, 20, 4 ], [ 28, 21, 4 ], [ 28, 22, 4 ], [ 28, 23, 3 ], [ 28, 24, 2 ],
  [ 28, 25, 2 ], [ 28, 26, 2 ], [ 28, 27, 2 ], [ 28, 28, 1 ] ]

Za ove kodove znamo da su k-optimalni pa ih odmah stavljamo.

 KO:=[[28,28,1],[28,27,2]];
[ [ 28, 28, 1 ], [ 28, 27, 2 ] ]

# pocetni skup kandidata za ko

gap> ko:=List([3..28],d->[28,LogInt(UpperBound(28,d,2),2),d]);
[ [ 28, 23, 3 ], [ 28, 22, 4 ], [ 28, 19, 5 ], [ 28, 18, 6 ], [ 28, 16, 7 ], [ 28, 15, 8 ], [ 28, 13, 9 ], [ 28, 12, 10 ],
  [ 28, 10, 11 ], [ 28, 9, 12 ], [ 28, 6, 13 ], [ 28, 5, 14 ], [ 28, 3, 15 ], [ 28, 3, 16 ], [ 28, 2, 17 ], [ 28, 2, 18 ],
  [ 28, 1, 19 ], [ 28, 1, 20 ], [ 28, 1, 21 ], [ 28, 1, 22 ], [ 28, 1, 23 ], [ 28, 1, 24 ], [ 28, 1, 25 ], [ 28, 1, 26 ],
  [ 28, 1, 27 ], [ 28, 1, 28 ] ]

# postoje sigurno oni koji su u DO

gap> KO:=Union(KO,Intersection(ko,DO));
[ [ 28, 1, 28 ], [ 28, 2, 18 ], [ 28, 3, 16 ], [ 28, 5, 14 ], [ 28, 22, 4 ], [ 28, 23, 3 ], [ 28, 27, 2 ], [ 28, 28, 1 ] ]
gap> ko:=Difference(ko,DO);
[ [ 28, 1, 19 ], [ 28, 1, 20 ], [ 28, 1, 21 ], [ 28, 1, 22 ], [ 28, 1, 23 ], [ 28, 1, 24 ], [ 28, 1, 25 ], [ 28, 1, 26 ],
  [ 28, 1, 27 ], [ 28, 2, 17 ], [ 28, 3, 15 ], [ 28, 6, 13 ], [ 28, 9, 12 ], [ 28, 10, 11 ], [ 28, 12, 10 ], [ 28, 13, 9 ],
  [ 28, 15, 8 ], [ 28, 16, 7 ], [ 28, 18, 6 ], [ 28, 19, 5 ] ]

# postoje i svi oni za koje je k=1

gap> KO:=Union(KO,Filtered(ko,x->x[2]=1));
[ [ 28, 1, 19 ], [ 28, 1, 20 ], [ 28, 1, 21 ], [ 28, 1, 22 ], [ 28, 1, 23 ], [ 28, 1, 24 ], [ 28, 1, 25 ], [ 28, 1, 26 ],
  [ 28, 1, 27 ], [ 28, 1, 28 ], [ 28, 2, 18 ], [ 28, 3, 16 ], [ 28, 5, 14 ], [ 28, 22, 4 ], [ 28, 23, 3 ], [ 28, 27, 2 ],
  [ 28, 28, 1 ] ]
gap> ko:=Filtered(ko,x->x[2]<>1);
[ [ 28, 2, 17 ], [ 28, 3, 15 ], [ 28, 6, 13 ], [ 28, 9, 12 ], [ 28, 10, 11 ], [ 28, 12, 10 ], [ 28, 13, 9 ], [ 28, 15, 8 ],
  [ 28, 16, 7 ], [ 28, 18, 6 ], [ 28, 19, 5 ] ]

k = 2

gap> ko2:=Filtered(ko,x->x[2]=2);
[ [ 28, 2, 17 ] ]
gap> Filtered(DO,x->x[2]=2);
[ [ 28, 2, 18 ] ]

Prema Teoremu 1, dijelu 3. iz postojanja koda [ 28, 2, 17 ] slijedi
postojanje koda [ 28, 2, 18 ].

gap> KO:=Union(KO,ko2);
[ [ 28, 1, 19 ], [ 28, 1, 20 ], [ 28, 1, 21 ], [ 28, 1, 22 ], [ 28, 1, 23 ], [ 28, 1, 24 ], [ 28, 1, 25 ], [ 28, 1, 26 ],
  [ 28, 1, 27 ], [ 28, 1, 28 ], [ 28, 2, 17 ], [ 28, 2, 18 ], [ 28, 3, 16 ], [ 28, 5, 14 ], [ 28, 22, 4 ], [ 28, 23, 3 ],
  [ 28, 27, 2 ], [ 28, 28, 1 ] ]
gap> ko:=Filtered(ko,x->x[2]<>2);
[ [ 28, 3, 15 ], [ 28, 6, 13 ], [ 28, 9, 12 ], [ 28, 10, 11 ], [ 28, 12, 10 ], [ 28, 13, 9 ], [ 28, 15, 8 ], [ 28, 16, 7 ],
  [ 28, 18, 6 ], [ 28, 19, 5 ] ]

k = 3

gap> ko3:=Filtered(ko,x->x[2]=3);
[ [ 28, 3, 15 ] ]
gap> Filtered(DO,x->x[2]=3);
[ [ 28, 3, 16 ] ]

Prema Teoremu 1, dijelu 3. iz postojanja koda [ 28, 3, 16 ] slijedi
postojanje koda [ 28, 3, 15 ].

gap> KO:=Union(KO,ko3);
[ [ 28, 1, 19 ], [ 28, 1, 20 ], [ 28, 1, 21 ], [ 28, 1, 22 ], [ 28, 1, 23 ], [ 28, 1, 24 ], [ 28, 1, 25 ], [ 28, 1, 26 ],
  [ 28, 1, 27 ], [ 28, 1, 28 ], [ 28, 2, 17 ], [ 28, 2, 18 ], [ 28, 3, 15 ], [ 28, 3, 16 ], [ 28, 5, 14 ], [ 28, 22, 4 ],
  [ 28, 23, 3 ], [ 28, 27, 2 ], [ 28, 28, 1 ] ]
gap> ko:=Filtered(ko,x->x[2]<>3);
[ [ 28, 6, 13 ], [ 28, 9, 12 ], [ 28, 10, 11 ], [ 28, 12, 10 ], [ 28, 13, 9 ], [ 28, 15, 8 ], [ 28, 16, 7 ], [ 28, 18, 6 ],
  [ 28, 19, 5 ] ]

k = 6

gap> ko6:=Filtered(ko,x->x[2]=6);
[ [ 28, 6, 13 ] ]
gap> Filtered(DO,x->x[2]=6);
[ [ 28, 6, 12 ] ]

# kod [ 28, 6, 12 ] je d-optimalan pa ne postoje kodovi s vecim d, tj. ne postoji [ 28, 6, 13 ]

gap> Filtered(DO,x->x[2]=5);
[ [ 28, 5, 14 ] ]

[ 28, 5, 14 ] je k-optimalan jer ne postoji [28,6,14].

gap> AddSet(KO,[28,5,14]);
gap> ko:=Filtered(ko,x->x[2]<>6);

k = 9

gap> ko9:=Filtered(ko,x->x[2]=9);
[ [ 28, 9, 12 ] ]
gap> Filtered(DO,x->x[2]=9);
[ [ 28, 9, 10 ] ]

gap> Filtered(DO,x->x[2]=8);
[ [ 28, 8, 11 ] ]

gap> Filtered(DO,x->x[2]=7);
[ [ 28, 7, 12 ] ]

Sada zaključujemo da je [ 28, 7, 12 ] k-optimalan (ne postoji [ 28, 8, 12 ]).

gap> AddSet(KO,[ 28, 7, 12 ]);
gap> ko:=Filtered(ko,x->x[2]<>9);
[ [ 28, 10, 11 ], [ 28, 12, 10 ], [ 28, 13, 9 ], [ 28, 15, 8 ], [ 28, 16, 7 ], [ 28, 18, 6 ], [ 28, 19, 5 ] ]

k = 10

gap> ko10:=Filtered(ko,x->x[2]=10);
[ [ 28, 10, 11 ] ]
gap> Filtered(DO,x->x[2]=10);
[ [ 28, 10, 10 ] ]

gap> Filtered(DO,x->x[2]=9);
[ [ 28, 9, 10 ] ]

gap> Filtered(DO,x->x[2]=9);
[ [ 28, 9, 10 ] ]
gap> Filtered(DO,x->x[2]=8);
[ [ 28, 8, 11 ] ]

gap> AddSet(KO,[ 28, 8, 11 ]);
gap> ko:=Filtered(ko,x->x[2]<>10);
[ [ 28, 12, 10 ], [ 28, 13, 9 ], [ 28, 15, 8 ], [ 28, 16, 7 ], [ 28, 18, 6 ], [ 28, 19, 5 ] ]

k = 12, 13, 15, 16 (analogno)

gap> ko12:=Filtered(ko,x->x[2]=12);
[ [ 28, 12, 10 ] ]
gap> Filtered(DO,x->x[2]=12);
[ [ 28, 12, 8 ] ]
gap> Filtered(DO,x->x[2]=11);
[ [ 28, 11, 8 ] ]
gap> Filtered(DO,x->x[2]=10);
[ [ 28, 10, 10 ] ]
gap> AddSet(KO,[ 28, 10, 10 ]);
gap> ko:=Filtered(ko,x->x[2]<>12);
[ [ 28, 13, 9 ], [ 28, 15, 8 ], [ 28, 16, 7 ], [ 28, 18, 6 ], [ 28, 19, 5 ] ]


gap> ko13:=Filtered(ko,x->x[2]=13);
[ [ 28, 13, 9 ] ]
gap> Filtered(DO,x->x[2]=13);
[ [ 28, 13, 8 ] ]
gap> Filtered(DO,x->x[2]=12);
[ [ 28, 12, 8 ] ]
gap> Filtered(DO,x->x[2]=11);
[ [ 28, 11, 8 ] ]
gap> Filtered(DO,x->x[2]=10);
[ [ 28, 10, 10 ] ]
gap> AddSet(KO,[ 28, 10, 10 ]);
gap> ko:=Filtered(ko,x->x[2]<>13);
[ [ 28, 15, 8 ], [ 28, 16, 7 ], [ 28, 18, 6 ], [ 28, 19, 5 ] ]


gap>
gap> ko15:=Filtered(ko,x->x[2]=15);
[ [ 28, 15, 8 ] ]
gap> Filtered(DO,x->x[2]=15);
[ [ 28, 15, 6 ] ]
gap> Filtered(DO,x->x[2]=14);
[ [ 28, 14, 8 ] ]
gap> AddSet(KO,[ 28, 14, 8 ]);
gap> ko:=Filtered(ko,x->x[2]<>15);
[ [ 28, 16, 7 ], [ 28, 18, 6 ], [ 28, 19, 5 ] ]


gap> ko16:=Filtered(ko,x->x[2]=16);
[ [ 28, 16, 7 ] ]
gap> Filtered(DO,x->x[2]=16);
[ [ 28, 16, 6 ] ]
gap> Filtered(DO,x->x[2]=15);
[ [ 28, 15, 6 ] ]
gap> Filtered(DO,x->x[2]=14);
[ [ 28, 14, 8 ] ]
gap> AddSet(KO,[ 28, 14, 8 ]);
gap> ko:=Filtered(ko,x->x[2]<>16);
[ [ 28, 18, 6 ], [ 28, 19, 5 ] ]

k = 18 i k = 19 nema rezultata u DO

gap> ko18:=Filtered(ko,x->x[2]=18);
[ [ 28, 18, 6 ] ]
gap> Filtered(DO,x->[2]=18);
[  ]
gap>
gap> ko19:=Filtered(ko,x->x[2]=19);
[ [ 28, 19, 5 ] ]
gap> Filtered(DO,x->[2]=19);
[  ]


gap> KO;
[ [ 28, 1, 19 ], [ 28, 1, 20 ], [ 28, 1, 21 ], [ 28, 1, 22 ], [ 28, 1, 23 ], [ 28, 1, 24 ], [ 28, 1, 25 ], [ 28, 1, 26 ], [ 28, 1, 27 ], [ 28, 1, 28 ],
  [ 28, 2, 17 ], [ 28, 2, 18 ], [ 28, 3, 15 ], [ 28, 3, 16 ], [ 28, 5, 14 ], [ 28, 7, 12 ], [ 28, 8, 11 ], [ 28, 10, 10 ], [ 28, 14, 8 ], [ 28, 22, 4 ], [ 28, 23, 3 ], [ 28, 27, 2 ], [ 28, 28, 1 ] ]

n-optimalni

gap> no:=Intersection(DO,KO);
[ [ 28, 1, 28 ], [ 28, 2, 18 ], [ 28, 3, 16 ], [ 28, 5, 14 ], [ 28, 7, 12 ], [ 28, 8, 11 ], [ 28, 10, 10 ], [ 28, 14, 8 ], [ 28, 22, 4 ], [ 28, 23, 3 ], [ 28, 27, 2 ], [ 28, 28, 1 ] ]

# oni koji imaju dimenziju ili d 28 su n-optimalni

gap> NO:=Filtered(no,x->x[2]=28 or x[3]=28);
[ [ 28, 1, 28 ], [ 28, 28, 1 ] ]
gap> no:=Difference(no,NO);
[ [ 28, 2, 18 ], [ 28, 3, 16 ], [ 28, 5, 14 ], [ 28, 7, 12 ], [ 28, 8, 11 ], [ 28, 10, 10 ], [ 28, 14, 8 ], [ 28, 22, 4 ], [ 28, 23, 3 ], [ 28, 27, 2 ] ]
gap> kno:=List(no,x->x[2]);
[ 2, 3, 5, 7, 8, 10, 14, 22, 23, 27 ]
gap> Filtered(kno,k->BoundsMinimumDistance(27,k,GF(2)).lowerBound<>BoundsMinimumDistance(27,k,GF(2)).upperBound);
[  ]

# gap zna sve za n=27

gap> nu:=List(kno,k->[27,k,BoundsMinimumDistance(27,k,GF(2)).lowerBound]);
[ [ 27, 2, 18 ], [ 27, 3, 15 ], [ 27, 5, 13 ], [ 27, 7, 12 ], [ 27, 8, 10 ], [ 27, 10, 9 ], [ 27, 14, 7 ], [ 27, 22, 3 ], [ 27, 23, 2 ], [ 27, 27, 1 ] ]
# izbacujemo neke koji nisu n-optimalni
gap> no:=Difference(no,List(nu,x->[x[1]+1,x[2],x[3]]));
[ [ 28, 3, 16 ], [ 28, 5, 14 ], [ 28, 8, 11 ], [ 28, 10, 10 ], [ 28, 14, 8 ], [ 28, 22, 4 ], [ 28, 23, 3 ], [ 28, 27, 2 ] ]
gap> NO:=Union(NO,no);
[ [ 28, 1, 28 ], [ 28, 3, 16 ], [ 28, 5, 14 ], [ 28, 8, 11 ], [ 28, 10, 10 ], [ 28, 14, 8 ], [ 28, 22, 4 ], [ 28, 23, 3 ], [ 28, 27, 2 ], [ 28, 28, 1 ] ]


optimalni

gap> kNO:=List(NO,x->x[2]);
[ 1, 3, 5, 8, 10, 14, 22, 23, 27, 28 ]
gap> Filtered(kNO,k->BoundsMinimumDistance(29,k,GF(2)).lowerBound<>BoundsMinimumDistance(29,k,GF(2)).upperBound);
[  ]
# gap zna sve za n=29
gap> pr:=List(kNO,k->[29,k,BoundsMinimumDistance(29,k,GF(2)).lowerBound]);
[ [ 29, 1, 29 ], [ 29, 3, 16 ], [ 29, 5, 14 ], [ 29, 8, 12 ], [ 29, 10, 10 ], [ 29, 14, 8 ], [ 29, 22, 4 ], [ 29, 23, 4 ], [ 29, 27, 2 ], [ 29, 28, 2 ] ]
gap> O:=Difference(NO,List(pr,x->[x[1]-1,x[2],x[3]-1]));
[ [ 28, 3, 16 ], [ 28, 5, 14 ], [ 28, 10, 10 ], [ 28, 14, 8 ], [ 28, 22, 4 ], [ 28, 27, 2 ] ]
gap> kO:=List(O,x->x[2]);
[ 3, 5, 10, 14, 22, 27 ]
gap> Filtered(kO,k->BoundsMinimumDistance(29,k+1,GF(2)).lowerBound<>BoundsMinimumDistance(29,k+1,GF(2)).upperBound);
[  ]
gap> pr:=List(kNO,k->[29,k+1,BoundsMinimumDistance(29,k+1,GF(2)).lowerBound]);
[ [ 29, 2, 19 ], [ 29, 4, 15 ], [ 29, 6, 13 ], [ 29, 9, 11 ], [ 29, 11, 9 ], [ 29, 15, 7 ], [ 29, 23, 4 ], [ 29, 24, 3 ], [ 29, 28, 2 ], [ 29, 29, 1 ] ]
gap> O:=Difference(O,List(pr,x->[x[1]-1,x[2]-1,x[3]]));
[ [ 28, 3, 16 ], [ 28, 5, 14 ], [ 28, 10, 10 ], [ 28, 14, 8 ] ]


RJEŠENJE:
d-optimalni
[ 28, 1, 28 ], [ 28, 2, 18 ], [ 28, 3, 16 ], [ 28, 4, 14 ], [ 28, 5, 14 ], [ 28, 6, 12 ], [ 28, 7, 12 ], [ 28, 8, 11 ],
  [ 28, 9, 10 ], [ 28, 10, 10 ], [ 28, 11, 8 ], [ 28, 12, 8 ], [ 28, 13, 8 ], [ 28, 14, 8 ], [ 28, 15, 6 ], [ 28, 16, 6 ],
  [ 28, 17, 6 ], [ 28, 18, 5 ], [ 28, 19, 4 ], [ 28, 20, 4 ], [ 28, 21, 4 ], [ 28, 22, 4 ], [ 28, 23, 3 ], [ 28, 24, 2 ],
  [ 28, 25, 2 ], [ 28, 26, 2 ], [ 28, 27, 2 ], [ 28, 28, 1 ]
k-optimalni
[ 28, 1, 19 ], [ 28, 1, 20 ], [ 28, 1, 21 ], [ 28, 1, 22 ], [ 28, 1, 23 ], [ 28, 1, 24 ], [ 28, 1, 25 ], [ 28, 1, 26 ], [ 28, 1, 27 ], [ 28, 1, 28 ],
  [ 28, 2, 17 ], [ 28, 2, 18 ], [ 28, 3, 15 ], [ 28, 3, 16 ], [ 28, 5, 14 ], [ 28, 7, 12 ], [ 28, 8, 11 ], [ 28, 10, 10 ], [ 28, 14, 8 ], [ 28, 22, 4 ], [ 28, 23, 3 ], [ 28, 27, 2 ], [ 28, 28, 1 ]
n-optimalni
[ 28, 1, 28 ], [ 28, 3, 16 ], [ 28, 5, 14 ], [ 28, 8, 11 ], [ 28, 10, 10 ], [ 28, 14, 8 ], [ 28, 22, 4 ], [ 28, 23, 3 ], [ 28, 27, 2 ], [ 28, 28, 1 ]
optimalni
[ 28, 3, 16 ], [ 28, 5, 14 ], [ 28, 10, 10 ], [ 28, 14, 8 ]